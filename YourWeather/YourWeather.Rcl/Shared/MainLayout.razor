@using BlazorComponent.I18n;
@inherits LayoutComponentBase

<MApp>
    <MAppBar App="true">
        <MAppBarNavIcon @onclick="() => _drawer = !_drawer"></MAppBarNavIcon>
        <MToolbarTitle>@Title</MToolbarTitle>
        <MSpacer></MSpacer>
        <MButton Text="true" Color="primary" Target="_blank" Href="https://docs.masastack.com/blazor/introduction/why-masa-blazor">About</MButton>
    </MAppBar>

    <MNavigationDrawer App="true" @bind-Value="_drawer">
        <MList Nav Routable>
            <MListItem Href="/" ActiveClass="primary--text">
                <MListItemIcon>
                    <MIcon>mdi-weather-cloudy</MIcon>
                </MListItemIcon>
                <MListItemContent>
                    <MListItemTitle>天气</MListItemTitle>
                </MListItemContent>
            </MListItem>
            <MListItem Href="/counter" ActiveClass="primary--text">
                <MListItemIcon>
                    <MIcon>mdi-plus</MIcon>
                </MListItemIcon>
                <MListItemContent>
                    <MListItemTitle>Counter</MListItemTitle>
                </MListItemContent>
            </MListItem>
            <MListItem Href="/setting" ActiveClass="primary--text">
                <MListItemIcon>
                    <MIcon>mdi-cog-outline</MIcon>
                </MListItemIcon>
                <MListItemContent>
                    <MListItemTitle>设置</MListItemTitle>
                </MListItemContent>
            </MListItem>
        </MList>
    </MNavigationDrawer>

    <MMain>
        <MContainer Fluid>
            <MErrorHandler>
                <CascadingValue Value="this" IsFixed>
                    @Body
                </CascadingValue>
            </MErrorHandler>
        </MContainer>
    </MMain>
</MApp>

@code {

    private bool _drawer;
    private string? Title;

    [Inject]
    private MasaBlazor MasaBlazor { get; set; } = default!;
    [Inject]
    private IThemeService ThemeService { get; set; } = default!;
    [Inject]
    private ISettingsService SettingsService { get; set; } = default!;

    public void UpdateTitle(string? value)
    {
        Title = value;
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        ThemeService.OnChanged += ThemeChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await LoadSettings();
        }
    }

    private void ThemeChanged(ThemeType value)
    {
        if (MasaBlazor.Theme.Dark != (value == ThemeType.Dark))
        {
            MasaBlazor.ToggleTheme();
        }
    }

    private async Task LoadSettings()
    {
        int themeType = await SettingsService.Get<int>(SettingType.Theme);
        ThemeService.ThemeType = (ThemeType)themeType;
    }

}
