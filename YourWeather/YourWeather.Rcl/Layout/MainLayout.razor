@inherits LayoutComponentBase

<PageTitle>@Title</PageTitle>

<MApp>
    <MAppBar App="true" Outlined="true" Elevation="0">
        @if (_showBack)
        {
            <MButton Icon="true" OnClick="Back">
                <MIcon>mdi-arrow-left</MIcon>
            </MButton>
        }
        else
        {
            <MAppBarNavIcon @onclick="() => _drawer = !_drawer"></MAppBarNavIcon>
        }

        <MToolbarTitle>@Title</MToolbarTitle>
        <MSpacer></MSpacer>
    </MAppBar>

    <MNavigationDrawer @bind-Value="_drawer"
                       App="true"
                       Floating="true"
                       Class="m-sheet--outlined">
        <MList Nav Routable>
            <MListItemGroup>
                <MListItem Href="">
                    <MListItemIcon>
                        <MIcon>mdi-weather-cloudy</MIcon>
                    </MListItemIcon>
                    <MListItemContent>
                        <MListItemTitle>天气</MListItemTitle>
                    </MListItemContent>
                </MListItem>
                <MListItem Href="location">
                    <MListItemIcon>
                        <MIcon>mdi-map-marker-outline</MIcon>
                    </MListItemIcon>
                    <MListItemContent>
                        <MListItemTitle>位置</MListItemTitle>
                    </MListItemContent>
                </MListItem>
                <MListItem Href="setting">
                    <MListItemIcon>
                        <MIcon>mdi-cog-outline</MIcon>
                    </MListItemIcon>
                    <MListItemContent>
                        <MListItemTitle>设置</MListItemTitle>
                    </MListItemContent>
                </MListItem>
            </MListItemGroup>
        </MList>
    </MNavigationDrawer>

    <MMain>
        <MContainer Fluid>
            <MErrorHandler>
                <CascadingValue Value="this" IsFixed>
                    @Body
                </CascadingValue>
            </MErrorHandler>
        </MContainer>
    </MMain>
</MApp>


@code {

    protected bool? _drawer;
    protected bool _showBack;
    protected string? Title;
    protected string? HistoryUrl;

    [Inject]
    protected MasaBlazor MasaBlazor { get; set; } = default!;
    [Inject]
    protected IThemeService ThemeService { get; set; } = default!;
    [Inject]
    protected ISettingsService SettingsService { get; set; } = default!;
    [Inject]
    protected NavigationManager Navigation { get; set; } = default!;

    public void UpdateTitle(string? value)
    {
        Title = value;
        InvokeAsync(StateHasChanged);
    }

    public void ShowBack(bool show, string url)
    {
        _showBack = show;
        HistoryUrl = url;
        InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ThemeService.OnChanged += ThemeChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitThemeAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected async Task InitThemeAsync()
    {
        await InitThemeServiceAsync();
        int themeType = await SettingsService.Get<int>(SettingType.Theme);
        await ThemeService.SetThemeAsync((ThemeType)themeType);
    }

    protected virtual Task InitThemeServiceAsync()
    {
        return ((ThemeService)ThemeService).InitializedAsync();
    }

    protected virtual void ThemeChanged(ThemeType value)
    {
        MasaBlazor.SetTheme(value == ThemeType.Dark);
    }

    protected void Back()
    {
        _showBack = false;
        if (!string.IsNullOrEmpty(HistoryUrl))
        {
            Navigation.NavigateTo(HistoryUrl);
        }
    }
}
