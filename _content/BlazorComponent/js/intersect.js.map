{"version":3,"file":"intersect.js","sources":["../../../BlazorComponent.Web/src/mixins/intersect/index.ts"],"sourcesContent":["class Intersect {\n  el: HTMLElement;\n  dotnetHelper: DotNet.DotNetObject;\n  observer: IntersectionObserver;\n\n  constructor(\n    el: HTMLElement,\n    dotnetHelper: DotNet.DotNetObject,\n    options?: IntersectionObserverInit\n  ) {\n    this.el = el;\n    this.dotnetHelper = dotnetHelper;\n\n    this.observer = new IntersectionObserver(\n      (\n        entries: IntersectionObserverEntry[] = [],\n        observer: IntersectionObserver\n      ) => {\n        const isIntersecting = entries.some((entry) => entry.isIntersecting);\n        if (isIntersecting) {\n          dotnetHelper.invokeMethodAsync(\"invoke\");\n        }\n      },\n      options ?? {}\n    );\n\n    this.observer.observe(el);\n  }\n\n  dispose() {\n    if (this.dotnetHelper[\"dispose\"]) {\n      this.observer.unobserve(this.el);\n      this.dotnetHelper[\"dispose\"]();\n    }\n  }\n}\n\nfunction init(\n  el: HTMLElement,\n  dotnetHelper: DotNet.DotNetObject,\n  options?: IntersectionObserverInit\n) {\n  return new Intersect(el, dotnetHelper, options);\n}\n\nexport { init };\n"],"names":["Intersect","constructor","el","dotnetHelper","options","this","observer","IntersectionObserver","entries","some","entry","isIntersecting","invokeMethodAsync","observe","dispose","unobserve","init"],"mappings":"AAAA,MAAMA,EAKJC,YACEC,EACAC,EACAC,GAEAC,KAAKH,GAAKA,EACVG,KAAKF,aAAeA,EAEpBE,KAAKC,SAAW,IAAIC,sBAClB,CACEC,EAAuC,GACvCF,KAEuBE,EAAQC,MAAMC,GAAUA,EAAMC,kBAEnDR,EAAaS,kBAAkB,SAChC,GAEHR,QAAAA,EAAW,CAAA,GAGbC,KAAKC,SAASO,QAAQX,EACvB,CAEDY,UACMT,KAAKF,aAAsB,UAC7BE,KAAKC,SAASS,UAAUV,KAAKH,IAC7BG,KAAKF,aAAsB,UAE9B,EAGH,SAASa,EACPd,EACAC,EACAC,GAEA,OAAO,IAAIJ,EAAUE,EAAIC,EAAcC,EACzC"}